// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  clerkUserId    String   @unique
  email          String   @unique
  name           String
  imageUrl       String
  createdIssues  Issue[]  @relation("Reporter")
  assignedIssues Issue[]  @relation("Assignee")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Project {
  id             String   @id @default(cuid())
  name           String
  key            String
  description    String?
  organisationId String
  issues         Issue[]
  sprints        Sprint[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organisationId, key])
}

model Sprint {
  id        String       @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  issues    Issue[]
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Issue {
  id          String  @id @default(cuid())
  title       String
  description String?

  status   IssueStatus
  order    Int
  priority IssuePriority

  reporter   User?    @relation("Reporter", fields: [reporterId], references: [id])
  reporterId String?
  assignee   User?    @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId String?
  Project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String?
  Sprint     Sprint?  @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId   String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([status, order])
}

enum SprintStatus {
  PLANNED
  COMPLETED
  ACTIVE
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
